(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{351:function(n,t,i){"use strict";i.r(t);var r=i(17),e=Object(r.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"分糖果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分糖果"}},[n._v("#")]),n._v(" 分糖果")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode.cn/problems/candy/description/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"}},[n._v("原题链接"),t("OutboundLink")],1),n._v("\nn 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。\n你需要按照以下要求，给这些孩子分发糖果：")]),n._v(" "),t("ul",[t("li",[n._v("每个孩子至少分配到 1 个糖果。")]),n._v(" "),t("li",[n._v("相邻两个孩子评分更高的孩子会获得更多的糖果。")])]),n._v(" "),t("p",[n._v("请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。")]),n._v(" "),t("p",[n._v("示例 1：")]),n._v(" "),t("blockquote",[t("p",[n._v("输入：ratings = [1,0,2]\n输出：5\n解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。")])]),n._v(" "),t("p",[n._v("示例 2：")]),n._v(" "),t("blockquote",[t("p",[n._v("输入：ratings = [1,2,2]\n输出：4\n解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。\n第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。")])]),n._v(" "),t("p",[n._v("提示：")]),n._v(" "),t("ul",[t("li",[n._v("n == ratings.length")]),n._v(" "),t("li",[n._v("1 <= n <= 2 * 104")]),n._v(" "),t("li",[n._v("0 <= ratings[i] <= 2 * 104")])]),n._v(" "),t("h2",{attrs:{id:"题解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[n._v("#")]),n._v(" 题解")]),n._v(" "),t("blockquote",[t("p",[n._v("两次循环，每次循环判断前(后)的值是否比自己大。如果当前值比前(后)值大,res[i] = max(res[i], res[i +/-1] +1)。 得到的结果为基准为0的差值。累加res[i],同时保证每个人能分到一个糖果的条件。")])]),n._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        int n = ratings.size();\n        vector<int> res(n, 0);\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (ratings[i] > ratings[i-1]) {\n                res[i] = res[i-1]+1;\n            }\n        }\n      \n        for (int i = n -2; i>=0;i--) {\n            if (ratings[i] > ratings[i+1]) {\n                res[i] = max(res[i+1] +1, res[i]);\n            }\n        }\n        for (int i =0; i < n;i++){\n            count += res[i];\n         \n        }\n                   \n         count += n;\n         \n         return count;\n    }\n};\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);