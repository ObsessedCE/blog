(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{369:function(n,s,t){"use strict";t.r(s);var e=t(17),u=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"删除有序数组中的重复项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除有序数组中的重复项"}},[n._v("#")]),n._v(" 删除有序数组中的重复项")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"}},[n._v("原题链接"),s("OutboundLink")],1),n._v("\n给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。")]),n._v(" "),s("p",[n._v("考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：")]),n._v(" "),s("ul",[s("li",[n._v("更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。")]),n._v(" "),s("li",[n._v("返回 k 。")])]),n._v(" "),s("p",[n._v("示例 1：")]),n._v(" "),s("blockquote",[s("p",[n._v("输入：nums = [1,1,2]\n输出：2, nums = [1,2,_]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。")])]),n._v(" "),s("p",[n._v("示例 2：")]),n._v(" "),s("blockquote",[s("p",[n._v("输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。")])]),n._v(" "),s("p",[n._v("提示：")]),n._v(" "),s("ul",[s("li",[n._v("1 <= nums.length <= 3 * 104")]),n._v(" "),s("li",[n._v("10^4 <= nums[i] <= 10^4")]),n._v(" "),s("li",[n._v("nums 已按 非严格递增 排列")])]),n._v(" "),s("h2",{attrs:{id:"题解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[n._v("#")]),n._v(" 题解")]),n._v(" "),s("blockquote",[s("p",[n._v("每次待放入的元素和最新放入符合条件的元素进行比较，如果不同放入，更新数组元素和下一个待放入位置指针。")])]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int m = nums.size();\n        if (m == 0) {\n            return 0;\n        }\n        int pos = 1;\n        for (int i = 1; i < m; i++) {\n            if (nums[i] == nums[pos-1]) {\n                continue;\n            }\n            nums[pos++] = nums[i];\n        }\n        return pos;\n    }\n};\n")])])])])}),[],!1,null,null,null);s.default=u.exports}}]);